import math

# The Tic-Tac-Toe board is represented as a 3x3 matrix
EMPTY = " "
PLAYER_X = "X"
PLAYER_O = "O"

def print_board(board):
    for row in board:
        print("|".join(row))
        print("-" * 5)

def evaluate(board):
    # Check rows, columns, and diagonals for a win or draw
    for i in range(3):
        if board[i][0] == board[i][1] == board[i][2]:
            if board[i][0] == PLAYER_X:
                return 10
            elif board[i][0] == PLAYER_O:
                return -10

        if board[0][i] == board[1][i] == board[2][i]:
            if board[0][i] == PLAYER_X:
                return 10
            elif board[0][i] == PLAYER_O:
                return -10

    if board[0][0] == board[1][1] == board[2][2]:
        if board[0][0] == PLAYER_X:
            return 10
        elif board[0][0] == PLAYER_O:
            return -10

    if board[0][2] == board[1][1] == board[2][0]:
        if board[0][2] == PLAYER_X:
            return 10
        elif board[0][2] == PLAYER_O:
            return -10

    return 0

def is_full(board):
    for row in board:
        if any(cell == EMPTY for cell in row):
            return False
    return True

def minimax(board, depth, is_maximizing, alpha, beta):
    score = evaluate(board)

    if score == 10:
        return score - depth
    if score == -10:
        return score + depth
    if is_full(board):
        return 0

    if is_maximizing:
        best = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = PLAYER_X
                    best = max(best, minimax(board, depth + 1, False, alpha, beta))
                    board[i][j] = EMPTY
                    alpha = max(alpha, best)
                    if beta <= alpha:
                        break
        return best
    else:
        best = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = PLAYER_O
                    best = min(best, minimax(board, depth + 1, True, alpha, beta))
                    board[i][j] = EMPTY
                    beta = min(beta, best)
                    if beta <= alpha:
                        break
        return best

def find_best_move(board):
    best_val = -math.inf
    best_move = (-1, -1)

    for i in range(3):
        for j in range(3):
            if board[i][j] == EMPTY:
                board[i][j] = PLAYER_X
                move_val = minimax(board, 0, False, -math.inf, math.inf)
                board[i][j] = EMPTY

                if move_val > best_val:
                    best_val = move_val
                    best_move = (i, j)

    return best_move

def check_winner(board, player):
    # Check rows, columns, and diagonals for a win
    for i in range(3):
        if all(cell == player for cell in board[i]):
            return True

        if all(board[j][i] == player for j in range(3)):
            return True

    if all(board[i][i] == player for i in range(3)):
        return True

    if all(board[i][2 - i] == player for i in range(3)):
        return True

    return False


def main():
    board = [[EMPTY, EMPTY, EMPTY],
             [EMPTY, EMPTY, EMPTY],
             [EMPTY, EMPTY, EMPTY]]

    while not is_full(board):
        print_board(board)
        row, col = map(int, input("Enter your move (row and column): ").split())
        if board[row][col] != EMPTY:
            print("Invalid move. Try again.")
            continue
        board[row][col] = PLAYER_O

        if check_winner(board, PLAYER_O):
            print_board(board)
            print("You win!")
            break

        if is_full(board):
            break

        print("AI is thinking...")
        ai_row, ai_col = find_best_move(board)
        board[ai_row][ai_col] = PLAYER_X

        if check_winner(board, PLAYER_X):
            print_board(board)
            print("AI wins!")
            break

    if not check_winner(board, PLAYER_X) and not check_winner(board, PLAYER_O):
        print_board(board)
        print("It's a draw!")

    print("Game Over")

if __name__ == "__main__":
    main()
